<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这里是我的第一个blog</title>
    <url>/2020/07/26/%E8%BF%99%E9%87%8C%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAblog/</url>
    <content><![CDATA[<h1 id="这里是我的第一个blog"><a href="#这里是我的第一个blog" class="headerlink" title="这里是我的第一个blog"></a>这里是我的第一个blog</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"Hello,World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>SSM整合学习笔记</title>
    <url>/2020/08/06/SSM%E6%95%B4%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://sm.ms/image/QJWFzIki514GlEZ" target="_blank"><img src="https://i.loli.net/2020/08/06/QJWFzIki514GlEZ.png" ></a></p>
<a id="more"></a>
<h3 id="1-SpringMVC与Spring的整合"><a href="#1-SpringMVC与Spring的整合" class="headerlink" title="1.SpringMVC与Spring的整合"></a>1.SpringMVC与Spring的整合</h3><p>1.在springmvc.xml中配置只扫描controller注解,如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--将use-default-filters设置为false然后指定只扫描controller层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.anthonylui"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:include-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span><span class="comment">&lt;!--驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="comment">&lt;!--静态文件加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span><span class="comment">&lt;!--跨域--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> <span class="attr">allowed-origins</span>=<span class="string">"*"</span> <span class="attr">allowed-headers</span>=<span class="string">"*"</span> <span class="attr">allow-credentials</span>=<span class="string">"true"</span> <span class="attr">allowed-methods</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在spring.xml中配置不扫描controller注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--不扫描controller注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.anthonylui"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:exclude-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--aop切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.在web.xml中将他们整理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局监听器,在Tomcat启动时加载spring.xml初始化父容器对象,并且把父容器对象保存在servletContext对象中-&gt;   </span></span><br><span class="line"><span class="comment">&lt;listener&gt;</span></span><br><span class="line"><span class="comment">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span></span><br><span class="line"><span class="comment">    &lt;/listener&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将spring.xml读取入配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--配置DispatcherServlet作为容器的调度程序,同时将springmvc.xml加载,初始化子容器对象,并且从servletContext中获取监听器创建的父容器对象,子容器持有了父容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Spring与mybatis整合"><a href="#2-Spring与mybatis整合" class="headerlink" title="2.Spring与mybatis整合"></a>2.Spring与mybatis整合</h3><p>在spring.xml中引入mybatis-spring.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"mybatis-spring.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mybatis-spring.xml的配置文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入jdbc.properties配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--创建数据库连接池对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"jdbc.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"jdbc.password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc.url"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--创建全局sqlSessionFactory对象(数据源,映射对象)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用来指定其他mapper包下的xml配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/anthonylui/*/mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用来引入其他的xml配置文件,例如别名等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对指定包下的所有接口创建代理对象，加入spring容器,可以直接对mapper进行注入,然后用mapper注入的代理对象来调用方法--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.anthonylui.*.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-spring的事务管理"><a href="#3-spring的事务管理" class="headerlink" title="3.spring的事务管理"></a>3.spring的事务管理</h3><p>1.先配置spring的事务管理器对象在spring-mybatis.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处id要写正确否则无法正常运行--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.用注解的方法要先配置注解方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过事务通知，把事务管理器织入到带有@Transactional注解的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-逆向工程"><a href="#4-逆向工程" class="headerlink" title="4.逆向工程"></a>4.逆向工程</h3><p>导入mybatis-generator-core和mysql-connector-java包然后在generator.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 数据库链接URL、用户名、密码 --&gt;</span></span><br><span class="line">		 <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/test"</span> <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 生成模型的包名和位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.anthonylui.user.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"D:\javastage3\SSM\src"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 生成的映射文件包名和位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.anthonylui.user.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"D:\javastage3\SSM\src"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 生成DAO的包名和位置 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"cn.anthonylui.user.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"D:\javastage3\SSM\src"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 要生成那些表(更改tableName和domainObjectName就可以) --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"user"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再在java中运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">    URL resource = MyGenerator.class.getClassLoader().getResource("generator.xml");</span><br><span class="line">    String path = resource.getPath();</span><br><span class="line">    System.out.println(path);</span><br><span class="line">    File configFile = <span class="keyword">new</span> File(path);</span><br><span class="line">    ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">    Configuration config = <span class="keyword">null</span>;</span><br><span class="line">    config = cp.parseConfiguration(configFile);</span><br><span class="line">    DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">    MyBatisGenerator myBatisGenerator = <span class="keyword">null</span>;</span><br><span class="line">    myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">    myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可</p>
<h3 id="5-分页"><a href="#5-分页" class="headerlink" title="5.分页"></a>5.分页</h3><p>在spring-mybatis.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--分页合理化配置,在最后一页不能再有下一页--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>reasonable=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--把这一段加在 &lt;bean class="org.mybatis.spring.SqlSessionFactoryBean"&gt;&lt;/bean&gt;中间,其原理是一个拦截器--&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在java的方法中加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> PageHelper.startPage(pageNumber,pageSize);</span><br><span class="line"><span class="comment">//pageNumber是开始页,pageSize是每页的查询条数,开始页从1开始</span></span><br></pre></td></tr></table></figure>

<p>在返回类型中可以在java中转换成更全面的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PageInfo&lt;Orders&gt; ordersPageInfo = <span class="keyword">new</span> PageInfo&lt;&gt;(list);</span><br></pre></td></tr></table></figure>

<p>此时将ordersPageInfo返回,则可以得到包括订单详情,页码的所有数据.</p>
<h3 id="6-日志"><a href="#6-日志" class="headerlink" title="6.日志"></a>6.日志</h3><p>日志组件:log4j(同步日志),logback(异步日志),log4j2(异步日志)</p>
<p>日志接口(脸面):common-logging,slf4j.</p>
<p>日志信息分类:</p>
<blockquote>
<p>debug:调试级别,开发使用,用来输出一些变量值</p>
<p>info:信息级别,运行使用,用来记录用户的行为</p>
<p>warn:警告级别</p>
<p>error:错误级别,程序中的异常信息</p>
<p>debug&lt;info&lt;warn&lt;error</p>
</blockquote>
<h4 id="6-1-log4j同步日志"><a href="#6-1-log4j同步日志" class="headerlink" title="6.1 log4j同步日志"></a>6.1 log4j同步日志</h4><p>在src根目录下创建名为log4j.properties的配置文件,具体配置如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">############ERROR	WARM	INFO	DEBUG#####################</span></span><br><span class="line"><span class="comment">#第一个参数的意思启动几级的日志记录,如果是INFO,则不记录DEBUG级别日志</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO,CONSOLE,logfile,errfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############### CONSOLE OutPut ###############</span></span><br><span class="line"><span class="comment">#ConsoleAppender	FileAppender	DailyRollingFileAppender	RollingFileAppender	WriterAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="comment">#HTMLLayout		PatternLayout	SimpleLayout	TTCCLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############### Default Log Output #################</span></span><br><span class="line"><span class="meta">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment">#这里设置文件输出的位置</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.File</span>=<span class="string">D:/logs/info.log</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.MaxFileSize</span>=<span class="string">51200KB</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.MaxBackupIndex</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c.%M]-[%p] %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############### Custom Err Output #################</span></span><br><span class="line"><span class="meta">log4j.appender.errfile</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.Threshold</span>=<span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.File</span>=<span class="string">D:/logs/error.log</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.MaxFileSize</span>=<span class="string">51200KB</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.MaxBackupIndex</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.errfile.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%c.%M]-[%p] %m%n</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">ERROR</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>log4j.rootLogger:全局日志级别,日志输出位置1,日志输出位置2…</p>
<p>log4j.appender.输出位置:组件中日志记录类</p>
<p>log4j.appender.输出位置.layout:日志格式</p>
<p>log4j.logger.包名:对某个包指定日志级别</p>
</blockquote>
<p>使用方法:</p>
<p>在成员变量中new对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Logger logger = LogManager.getLogger(TestInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//括号中传入本类</span></span><br></pre></td></tr></table></figure>

<p>然后用logger对象可以调用方法记录,例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"记录了info级日志"</span>);</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">logger.debug(<span class="string">"记录了debug日志"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="6-2-log4j2异步日志-日常开发中不用-因总重启服务器会导致线程出错"><a href="#6-2-log4j2异步日志-日常开发中不用-因总重启服务器会导致线程出错" class="headerlink" title="6.2 log4j2异步日志(日常开发中不用,因总重启服务器会导致线程出错)"></a>6.2 log4j2异步日志(日常开发中不用,因总重启服务器会导致线程出错)</h4><p>1.加入log4j2需要的包</p>
<blockquote>
<p>disruptor</p>
<p>log4j-api</p>
<p>log4j-core</p>
<p>log4j-web</p>
</blockquote>
<p>2.加入log4j2.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">appenders</span>&gt;</span><span class="comment">&lt;!--输出位置配置--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">				<span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %class %L %M -- %msg%n"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- fileName：输出路径 filePattern：命名规则 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileDebug"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">fileName</span>=<span class="string">"D:/logs/debug.log"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">filePattern</span>=<span class="string">"D:/logs/$$&#123;date:yyyy-MM-dd&#125;/debug-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 输出格式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">				<span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %class&#123;36&#125; %L %M - %msg%n"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 单个日志文件的大小限制 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 最多保留20个日志文件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">fileName</span>=<span class="string">"D:/logs/info.log"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">filePattern</span>=<span class="string">"D:/logs/$$&#123;date:yyyy-MM-dd&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 输出格式 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">				<span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- SizeBasedTriggeringPolicy单个文件的大小限制 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- DefaultRolloverStrategy同一个文件下的最大文件数 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">fileName</span>=<span class="string">"D:/logs/warn.log"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">filePattern</span>=<span class="string">"D:/logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">				<span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!--&lt;TimeBasedTriggeringPolicy modulate="true" interval="1"/&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--最多保留20个日志文件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span> <span class="attr">min</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">fileName</span>=<span class="string">"D:/logs/error.log"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">filePattern</span>=<span class="string">"D:/logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"FATAL"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span></span></span><br><span class="line"><span class="tag">					<span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">				<span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!--&lt;TimeBasedTriggeringPolicy modulate="true" interval="1"/&gt; --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100 MB"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--最多保留20个日志文件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span> <span class="attr">min</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--这里是异步日志配置--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;AsyncLogger name="org.springframework" level="error" includeLocation="true"&gt;--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--&lt;AppenderRef ref="RollingFileError"&gt;&lt;/AppenderRef&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;/AsyncLogger&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;AsyncLogger name="org.mybatis" level="error" includeLocation="true"&gt;--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--&lt;AppenderRef ref="RollingFileError"&gt;&lt;/AppenderRef&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;/AsyncLogger&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;AsyncLogger name="com.alibaba.druid" level="error" includeLocation="true"&gt;--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--&lt;AppenderRef ref="RollingFileError"&gt;&lt;/AppenderRef&gt;--&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--&lt;/AsyncLogger&gt;--&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!--&lt;AsyncRoot level="info"&gt;--&gt;</span></span><br><span class="line"> 			<span class="comment">&lt;!--&lt;appender-ref ref="Console"/&gt;--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--&lt;appender-ref ref="RollingFileDebug"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;appender-ref ref="RollingFileInfo"/&gt;--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--&lt;appender-ref ref="RollingFileWarn"/&gt;--&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--&lt;appender-ref ref="RollingFileError"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/AsyncRoot&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--同步日志配置--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">loggers</span>&gt;</span><span class="comment">&lt;!--定全局日志级别和局部包的日志级别--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileDebug"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用法与log4j相同,如果想让mybatis的输出记录记入日志,则需要在<mark>mybatis.xml</mark>配置文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即可</p>
]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>知识分享</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC学习笔记</title>
    <url>/2020/08/01/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a href="https://sm.ms/image/jVu5ZylJmCXTekE" target="_blank"><img src="https://i.loli.net/2020/08/02/jVu5ZylJmCXTekE.png" ></a></p>
<a id="more"></a>

<h3 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1.配置环境"></a>1.配置环境</h3><p>在springMVC中配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lzy"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springMVC注解识别--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--同步开发使用的视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--prefix是web项目下网页所在文件夹,用/包裹,suffix是web的页面格式,用ModelAndView的时候,setView的string就是该网址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/website/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在web.xml里配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用来初始化变量--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--初始化顺序,在加载servlet的时候就初始化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有的访问都映射到DispatcherServlet类中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2.具体使用"></a>2.具体使用</h3><p>第一个简单应用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span><span class="comment">//加注解,可以使其扫描</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/MVCdemo"</span>)<span class="comment">//加注解,做第一个层级,网址变成/MVCdemo/....</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tuserHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@RequestMapping中的名字是浏览器访问方法的地址</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/自定义名字"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"到了methodA"</span>);</span><br><span class="line">        <span class="comment">//return返回值返回的是网页地址,实现了一次转发</span></span><br><span class="line">        <span class="comment">//在web.xml中配置的 &lt;property name="prefix" value="/website/"&gt;&lt;/property&gt;和&lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;代表了网站的地址和网站后缀格式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helloworld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注解释义:</p>
<ol>
<li><p><mark>@RequestMapping</mark>:该注解下注释的方法,用get或者post方法都可以获取到前端数据,其()中可以写path,method等属性和值,例如:@RequestMapping(path = “/methodA”,method = RequestMethod.GET),设定了只能取得GET方式发送的参数,如果用POST方式向该方法发送请求则会出现405错误.</p>
</li>
<li><p><mark>@GetMapping</mark>:和上述注解作用相同,直接规定了取得参数的发送方式,发送时形参名要与表单发送的参数名一致即可获得数据.如果传入实体类对象,则对象的成员变量要与表单发送的参数名一致,并会对对象进行set数值赋值.若出现400错误,一般都是参数格式错误,例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodB</span><span class="params">(Date birthday)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//其中的参数birthday的参数为Date,所以需要做转换,要在参数前增加 @DateTimeFormat(pattern = "yyyy-MM-dd")转换格式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果形参同时是两个对象,而两个对象中持有同名的成员变量,则同时给两个参数的同名的成员变量set赋值</p>
</li>
<li><p>在TomCat服务器下,如果提交的表单的变量,在servlet有中文乱码现象,在GET发送方式下,在其service配置文件中删除useBodyEncodingFromURI和URIEncoding,在POST发送方式下可以添加过滤器,在web.xml下配置如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-接收表单的参数"><a href="#3-接收表单的参数" class="headerlink" title="3.接收表单的参数"></a>3.接收表单的参数<mark></mark></h3><ol>
<li><p><mark>application/x-www-form-urlencoded</mark>:</p>
<p>​        对应的数据格式：key=value&amp;key=value</p>
<p>​        如果是简单类型，加形参，形参名与表单参数名一致。</p>
<p>​        如果是对象类型，加对象形参，表单参数名与对象的属性名一致。</p>
</li>
<li><p><mark>application/json</mark>:(GET请求不能传json数据)</p>
<p>​        需要导入Jackson的三个jar包,其内部原理是通过req.getInputStream()方法得到req的字节流,然后通过JSON.ParseObject(jsonstr,POJO.class)转成可以使用的实参</p>
<p>​        对应的数据格式：{“key”:value,”key”:value}</p>
<p>​        后端需要引入json包。    </p>
<p>​        形参前加@RequestBody注解.</p>
<p>​        PS:不能两个对象中具有相同的成员变量,会出现IO异常</p>
<p>也可以将传来的Json传入map中,例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/all"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">selALL</span><span class="params">(@RequestBody Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">     Tuser tuser = <span class="keyword">new</span> Tuser();</span><br><span class="line">     Tdept tdept = <span class="keyword">new</span> Tdept();</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//要导入commons-beanutils和commons-collections的jar包</span></span><br><span class="line">         BeanUtils.populate(tuser,map);</span><br><span class="line">         BeanUtils.populate(tdept,map);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">"helloworld"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><mark>@RequestParam与@RequestBody区别</mark>:</p>
<p><mark>@RequestBody</mark>：用来获取前端json格式的数据。只能是对象.</p>
<p><mark>@RequestParam</mark>：用来获取key=value&amp;key=value格式的数据，只用来注解简单数据（Integer，String），可以设置默认值。</p>
</li>
</ol>
</li>
</ol>
<h3 id="4-返回数据给客户端"><a href="#4-返回数据给客户端" class="headerlink" title="4.返回数据给客户端"></a>4.返回数据给客户端</h3><ol>
<li><p>同步请求:把数据放在request域或session域</p>
<p>方法1,通过添加Model形参:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping</span>(path = <span class="string">"/getUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodD</span><span class="params">(user user,Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,tuser);<span class="comment">//把数据放在request域</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helloworld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在jsp页面端通过el表达式$&#123;user&#125;来取值</span></span><br></pre></td></tr></table></figure>

<p>方法2,通过返回ModelAndView视图:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/objuser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">methodC</span><span class="params">(Tuser tuser,Tdept tdept)</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"user"</span>,tuser);</span><br><span class="line">        modelAndView.setViewName(<span class="string">"helloworld"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在jsp页面端通过el表达式$&#123;user&#125;来取值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>异步请求:ajax或axios,要把json字符串传给客户端</p>
</li>
</ol>
<ul>
<li><p>可以直接返回对象,在方法名上加<mark>@ResponseBody    </mark>,将返回的数组变成json字符串(前提是有Jackson包),并且只能返回对象</p>
</li>
<li><p>也可以在方法上加<mark>@ResponseEntity</mark>,此时可以返回Colleciton集合,例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/objback"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">methodE</span><span class="params">(String did)</span></span>&#123;</span><br><span class="line">       List&lt;Tuser&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Tuser tuser = <span class="keyword">new</span> Tuser();</span><br><span class="line">       tuser.setDid(did);</span><br><span class="line">       tuser.setUbirthday(<span class="keyword">new</span> Date());</span><br><span class="line">       tuser.setUname(<span class="string">"jack"</span>);</span><br><span class="line">       tuser.setUage(<span class="number">15165</span>);</span><br><span class="line">  </span><br><span class="line">       Tuser tuser1 = <span class="keyword">new</span> Tuser();</span><br><span class="line">       tuser1.setUage(<span class="number">5</span>);</span><br><span class="line">       tuser1.setUname(<span class="string">"shfjsaf"</span>);</span><br><span class="line">       list.add(tuser);</span><br><span class="line">       list.add(tuser1);</span><br><span class="line">       HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">       httpHeaders.add(<span class="string">"Context-type"</span>,<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(list,httpHeaders,HttpStatus.OK);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>此时return的值,第一个是Collection集合,第二个是HTTPHeaders请求头,这也是这种方法的优势,可以自由设置请求头格式,第三个是返回值的状态200,方便前端在取值前做验证</p>
<h3 id="5-Servlet对象的获取"><a href="#5-Servlet对象的获取" class="headerlink" title="5.Servlet对象的获取"></a>5.Servlet对象的获取</h3><p>方式:在方法的()中加形参<mark>HttpServletRequest,HttpServletResponse,HttpSession</mark>等</p>
<h3 id="6-rest风格接口"><a href="#6-rest风格接口" class="headerlink" title="6.rest风格接口"></a>6.rest风格接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;uname&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">methodB</span><span class="params">(@PathVariable(<span class="string">"uname"</span>)</span> String name)</span>&#123;</span><br><span class="line">    Tuser tuser = <span class="keyword">new</span> Tuser();</span><br><span class="line">    tuser.setUname(name);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(tuser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即在()中写/{},在形参上写注解<mark>@PathVariable(“”)</mark>,其中()中的string要与方法上的注解/{}中的string相同.这样可以在链接处更优雅,传参可以不用写?key=value…可以直接把参数写在url后面,而不用k=v的形式.例如传参的url本该是<a href="http://localhost:8080/myWeb?username=jack,而经过此修改后url只需要写http://localhost:8080/myWeb/jack即可.其方法上的注解有" target="_blank" rel="noopener">http://localhost:8080/myWeb?username=jack,而经过此修改后url只需要写http://localhost:8080/myWeb/jack即可.其方法上的注解有</a>:<mark>@GetMapping(查询),@PostMapping(增加),@DeleteMapping(删除),@PutMapping(修改)</mark></p>
<p>PS:在put与delete请求中,请求参数如果是key=value&amp;…后端会收不到数据,因为应用服务器(如:TomCat)只能对get和post中的key=value解析,此时应该在web.xml配置过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>formContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.FormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>formContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在类上加<mark>@RestController</mark>代表本类中所有方法都是异步,不用写<mark>@ResponseEntity</mark>,这时返回值类型可以自由定义,只返回定义的对象而不再返回视图</p>
<h3 id="7-静态资源的获取"><a href="#7-静态资源的获取" class="headerlink" title="7.静态资源的获取"></a>7.静态资源的获取</h3><p>例如css,js等静态资源的获取,由于</p>
<p>第一种方式,在springmvc.xml中加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置后所有的静态资源都走DefaultServlet,依赖应用服务器名字叫default的servlet</p>
<p>第二种方式,在springmvc.xml中加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/static/**"</span> <span class="attr">location</span>=<span class="string">"/static/"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:resources</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mapping对应的是url中的路径,location--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-异常的处理"><a href="#8-异常的处理" class="headerlink" title="8.异常的处理"></a>8.异常的处理</h3></li>
</ul>
<ol>
<li><p>如果是404错误,可以引入错误界面,web.xml的配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/website/err.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--location中写自定义的404界面--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>局部异常处理:对某个处理器类中的异常处理,通过<mark>@ExceptionHandler</mark>注解</p>
<p>在该类中添加方法,加注解,则该类的异常都会通过该方法,例如出现异常后转入err界面,则可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">String</span> <span class="title">handlerException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"err"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<mark>@ExceptionHandler()</mark>的()中写的是异常的类型,例如算数异常等等,写exception.class是指本类下的所有异常都要进入此方法.方法中的()里的e是指得到异常的类型,可以加也可以不加,通过e.getMessage()则得到异常的信息</p>
</li>
<li><p>全局异常处理:对所有处理器类中的异常处理,通过实现<mark>HandlerExceptionResolver</mark>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobExceptionHandler</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//此处设置转发的页面</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"err"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"time"</span>,System.currentTimeMillis());</span><br><span class="line">        modelAndView.addObject(<span class="string">"info"</span>,e.getMessage());</span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) o;</span><br><span class="line">        Method method = handlerMethod.getMethod();</span><br><span class="line">        <span class="comment">//此处获得发生异常的类的名称</span></span><br><span class="line">        String name = method.getDeclaringClass().getName();</span><br><span class="line">        modelAndView.addObject(<span class="string">"clzName"</span>,name);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其中方法的第三个形参是HandlerMethod类型,所以可以强转,此方法适合做同步页面</span></span><br></pre></td></tr></table></figure>

<p>其缺点是不能做前后端分离项目,不能返回数据</p>
</li>
<li><p>全局统一异常处理:通过<mark>@ControllerAdvice和@ExceptionHandler</mark>的结合使用来处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobExceptionHandler2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">handlerExcep</span>(<span class="title">MyExpection</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> StatusBean(e.getRespConditon()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//StatusBean只做错误提醒</span></span><br></pre></td></tr></table></figure>

<p>其中MyExpection是自定义的异常类,如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExpection</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> RespConditon respConditon;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyExpection</span><span class="params">(RespConditon respConditon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.respConditon = respConditon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RespConditon <span class="title">getRespConditon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> respConditon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRespConditon</span><span class="params">(RespConditon respConditon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.respConditon = respConditon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>RespCondition是枚举类,返回状态码和状态信息</p>
<h3 id="9-MVC框架下的上传下载"><a href="#9-MVC框架下的上传下载" class="headerlink" title="9.MVC框架下的上传下载"></a>9.MVC框架下的上传下载</h3><h4 id="9-1-上传"><a href="#9-1-上传" class="headerlink" title="9.1.上传"></a>9.1.上传</h4><p>先导入jar包:commons-fileupload与commons-io,因为MVC下用的也是这两个jar包中的方法.然后再springmvc.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里配置支持中文文件名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里配置临时文件限制域,限制上传的文件大小,如果小于设定值就在内存中读取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"100000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果大于设定值则在下面配置的路径下生成临时文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"uploadTempDir"</span> <span class="attr">value</span>=<span class="string">"upload/temp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在java中写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/myupload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesUpload</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">uploading</span><span class="params">(MultipartFile uploadFile, HttpServletRequest req)</span> </span>&#123;<span class="comment">//这里的形参的名字就是前端表单参数的名字</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line">        String originalFilename = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//针对于大文件,可以边读边写</span></span><br><span class="line">            InputStream inputStream = uploadFile.getInputStream();</span><br><span class="line">            <span class="comment">//得到文件的字节数组,适合小文件</span></span><br><span class="line">            bytes = uploadFile.getBytes();</span><br><span class="line">            <span class="comment">//得到文件的名字</span></span><br><span class="line">            originalFilename = uploadFile.getOriginalFilename();</span><br><span class="line">            <span class="comment">//得到文件的大小</span></span><br><span class="line">            <span class="keyword">long</span> size = uploadFile.getSize();</span><br><span class="line">            <span class="comment">//得到文件在服务器的绝对路径</span></span><br><span class="line">            String realPath = req.getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">            <span class="comment">//拼凑出要保存文件的地址</span></span><br><span class="line">            String savePath = realPath + <span class="string">"/"</span> + originalFilename;</span><br><span class="line">            <span class="comment">//在保存文件的地址上新建一个文件</span></span><br><span class="line">            File targetFile = <span class="keyword">new</span> File(savePath);</span><br><span class="line">            <span class="comment">//将文件的数据写入</span></span><br><span class="line">            FileUtils.writeByteArrayToFile(targetFile,bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="keyword">new</span> ResponseBean(RespConditon.SUCCESS, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//最后会写入out文件夹中的地址</span></span><br></pre></td></tr></table></figure>

<h4 id="9-2-下载"><a href="#9-2-下载" class="headerlink" title="9.2.下载"></a>9.2.下载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFiles</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/downfiles"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">down</span><span class="params">(String filepath, HttpServletRequest req)</span> </span>&#123;<span class="comment">//此处传入文件在服务器的相对路径</span></span><br><span class="line">        <span class="comment">//将文件的名字传入,得到文件的绝对路径</span></span><br><span class="line">        String realPath = req.getServletContext().getRealPath(filepath);</span><br><span class="line">        File file = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//把路径上的文件读成一个字节数组</span></span><br><span class="line">            bytes = FileUtils.readFileToByteArray(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//下载需要设置响应头,然后传入字节数组</span></span><br><span class="line">            HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//设置响应头,并把文件名的编码进行相对的修改</span></span><br><span class="line">                httpHeaders.add(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span>+URLEncoder.encode(file.getName(),<span class="string">"UTF-8"</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(bytes,httpHeaders,HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyExpection(RespConditon.FAILED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-拦截器"><a href="#10-拦截器" class="headerlink" title="10.拦截器"></a>10.拦截器</h3><p>先在springmvc.xml中配置xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置顺序一定是先配拦截路径,再配忽略路径,再配拦截器所在的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--拦截路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--忽略路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/static/**"</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--拦截器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.anthonylui.userHandler.LoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再在java中实现接口后写逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//前拦截,返回true则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        处理器方法正常返回并没有异常,执行这里</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//无论是否有异常都要走这个拦截</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>知识分享</tag>
      </tags>
  </entry>
  <entry>
    <title>spring常用注解</title>
    <url>/2020/07/31/spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://sm.ms/image/ownc9syh2p17X4Q" target="_blank"><img src="https://i.loli.net/2020/07/31/ownc9syh2p17X4Q.png" ></a></p>
<a id="more"></a>

<h4 id="1-MVC三层结构下-SSM"><a href="#1-MVC三层结构下-SSM" class="headerlink" title="1.MVC三层结构下(SSM):"></a>1.MVC三层结构下(SSM):</h4><p>先配置spring.xml,来扫描注解使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"包名"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><mark>@Repository</mark>:Dao层实现类</p>
</li>
<li><p><mark>@Controller</mark>:controller层</p>
</li>
<li><p><mark>@Service</mark>:service层</p>
</li>
<li><p><mark>@Component</mark>:其他类使用</p>
</li>
<li><p><mark>@Autowired</mark>:自动装配,在成员变量上面添加该注解,<strong>相当于在spring.xml给成员变量进行了property装配</strong>(<!--按照成员变量类型去容器中查找bean对象,通过反射-->)</p>
</li>
<li><p><mark>@Resource</mark>:java内的注解,先根据成员变量名称获取bean<!--获取bean的成员变量名称首字母要小写-->,如果找不到再按照类型去获取bean(当同一个接口有两个实现类的时候使用该注解来代替<mark>@Autowired</mark>以避免异常).</p>
</li>
<li><p><mark>@Qualifier</mark>:作为Resource的补充,用形参名来获取bean</p>
</li>
<li><p>集合注入</p>
<ul>
<li><p>List</p>
<p>方法1</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"自定义"</span> <span class="attr">class</span>=<span class="string">"类路径"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integer"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"double"</span> <span class="attr">value</span>=<span class="string">"156.46"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"integer数组"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>值3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key键"</span> <span class="attr">value</span>=<span class="string">"v值"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key键"</span> <span class="attr">value</span>=<span class="string">"v值"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"字符串string"</span> <span class="attr">value</span>=<span class="string">"值"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"类路径"</span> <span class="attr">p:</span>成员变量名=<span class="string">"自定义value"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用的不多,方法叫p-namespace--&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><em>所有的注解都可以在后面加()小括号并赋值,其赋值含义为该实例的id,通过注解的()属性给bean命名,默认id名称是类名首字母小写剩余补全.</em></p>
</li>
</ul>
<h4 id="2-基于JAVA类的容器配置"><a href="#2-基于JAVA类的容器配置" class="headerlink" title="2.基于JAVA类的容器配置:"></a>2.基于JAVA类的容器配置:</h4><p>  0配置(没有xml文件),在类中使用(不常用,需要看懂).</p>
<ol>
<li><p><mark>@Configuration</mark>:表示该类是配置类</p>
</li>
<li><p><mark>@PropertySource()</mark>:写在<mark>@Configuration</mark>下,括号中写配置文件,注解的()中接受的是数组,表明可以加载多个配置文件,<em>例如@PropertySource(jdbc.properties)</em>,然后用<mark>@Value(“${properties的名称}”)</mark>来给变量赋值,例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line">        <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.name&#125;"</span>)</span><br><span class="line">        <span class="keyword">private</span> String username;</span><br><span class="line">        <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">        <span class="keyword">private</span> String driver;</span><br><span class="line">        <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><mark>@ComponentScan(“包名”)</mark>:在其他类中加入注解<mark>@Component,@Service,@Controller</mark>等,可以在<mark>getBean()</mark>方法中get扫描过的类的方法或变量(即使用@注解 意味着成为了一个类的一部分),得到加入注解<mark>@Component</mark>的类的方法.</p>
</li>
<li><p><mark>@PostConstruct</mark>:某个类实例化以后立刻调用加该注解的方法,通常用于init()方法.</p>
</li>
<li><p><mark>@PreDestory</mark>:停止程序时销毁该方法</p>
</li>
<li><p><mark>@Bean</mark>:自动实例化该注解下的方法,如果该方法需要传参,则在本类的<mark>@Bean</mark>下寻找需要传参的相同的方法进行传参(类似Xml中的外部Bean引用),注意:<strong>要在有Configuration注解的类下使用</strong>,例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">createDruid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    druidDataSource.setUrl(url);</span><br><span class="line">    druidDataSource.setUsername(username);</span><br><span class="line">    druidDataSource.setDriverClassName(driver);</span><br><span class="line">    druidDataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> druidDataSource;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserService <span class="title">createUserService</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">    userService.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> userService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里就把<mark>createDruid()</mark>方法中return的返回值传给了<mark>createUserService(DataSource dataSource)</mark>中所需要的参数.</p>
<p><strong>PS:</strong><mark>@Bean</mark>注解的()中可以有方法,常用的有<strong>initMethod</strong>方法和<strong>destroyMethod</strong>方法,但是要求在该方法下创建的类中有初始化方法和销毁方法,例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource ds;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化方法</span></span><br><span class="line">        System.out.println(<span class="string">"userService的init方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//销毁方法</span></span><br><span class="line">        System.out.println(<span class="string">"销毁方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDs</span><span class="params">(DataSource ds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ds = ds;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Spring-Test"><a href="#3-Spring-Test" class="headerlink" title="3.Spring-Test"></a>3.Spring-Test</h4><h5 id="1-spring与junit的整合"><a href="#1-spring与junit的整合" class="headerlink" title="1.spring与junit的整合"></a>1.spring与junit的整合</h5><h6 id="1-1Junit"><a href="#1-1Junit" class="headerlink" title="1.1Junit"></a>1.1Junit</h6></li>
</ol>
<ol>
<li><p><mark>@FixMethodOrder(MethodSorters.NAME_ASCENDING)</mark>:让<mark>@Test</mark>的方法按照方法名的<strong>升序</strong>走</p>
</li>
<li><p><mark>@BeforeClass</mark>:在所有的测试方法执行前先执行一次的初始化方法,<strong>该方法必须是静态的.</strong></p>
</li>
<li><p><mark>@Before</mark>:在执行每个测试方法之前都执行一次该方法,主要用于<strong>让方法都有相同的测试环境</strong></p>
</li>
<li><p><mark>@AfterClass</mark>:在所有的测试方法执行之后执行的销毁方法,<strong>该方法也必须是静态的</strong></p>
</li>
<li><p><mark>@After</mark>:在执行每个测试方法之后都执行一次该方法</p>
</li>
<li><p><mark>Assert</mark>:断言,例如: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Assert.assertEquals(i,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//以及Assert.assertNotEuqals()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该方法,则会得到<u>java.lang.AssertionError</u>异常;</p>
<h6 id="1-2Junit与spring的整合"><a href="#1-2Junit与spring的整合" class="headerlink" title="1.2Junit与spring的整合"></a>1.2Junit与spring的整合</h6><p>利用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@ContextConfiguration("classpath:spring.xml")</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-AOP"><a href="#4-AOP" class="headerlink" title="4.AOP"></a>4.AOP</h4><h5 id="4-1AOP中的几个概念"><a href="#4-1AOP中的几个概念" class="headerlink" title="4.1AOP中的几个概念"></a>4.1AOP中的几个概念</h5><ol>
<li><p>实现方式:动态代理</p>
</li>
<li><p><mark>aspect</mark>:切面,是一个类,类中是非核心的辅助功能代码实现.</p>
</li>
<li><p><mark>advice</mark>:通知,是aspect类中的方法,分为前置通知,返回通知,最终通知,异常通知,环绕通知.</p>
</li>
<li><p><mark>weave</mark>:通过动态代理模式把通知方式插入.</p>
</li>
<li><p><mark>joinpoint</mark>:连接点,是一个方法,其实是核心业务方法</p>
</li>
<li><p><mark>target</mark>:目标对象,连接点方法所在的对象</p>
</li>
<li><p>通过动态代理把切面中的通知方法织入到目标对象连接点方法的周围.</p>
<h5 id="Aop的实现"><a href="#Aop的实现" class="headerlink" title="Aop的实现:"></a>Aop的实现:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;&quot;false&quot;&gt;&lt;&#x2F;aop:aspectj-autoproxy&gt;</span><br><span class="line">&#x2F;&#x2F;用以识别aspectj注解</span><br><span class="line">&#x2F;&#x2F;proxy-target-class&#x3D;&quot;false&quot;默认false,如果目标对象有接口,则使用代理,如果没有接口,则使用CGLIB,false就只使用CGLIB</span><br></pre></td></tr></table></figure>

<ol>
<li><p>两种实现方式</p>
<p><strong>基于apsectj注解</strong></p>
<ul>
<li>在元数据配置中，开启aspectj注解识别。</li>
<li>写service层的服务对象(aop中的目标对象)，加服务方法（aop的连接点方法）。</li>
<li>写切面类，写通知方法。</li>
</ul>
</li>
<li><p><mark>@Component</mark>:成为一个bean对象</p>
</li>
<li><p><mark>@Aspect</mark>:成为一个切面bean对象</p>
</li>
<li><p><mark>@Before()</mark>:前置通知方法,()中写的方法是经过<mark>@Pointcut</mark>注解过的方法,表示将前置通知方法植入到切入点表达式的范围的位置</p>
</li>
<li><p><mark>@AfterReturn(pointcut = “” , returning = “”)</mark>:返回通知方法</p>
</li>
<li><p><mark>@AfterThrowing(pointcut = “”,throwing = “”)</mark>:异常通知方法</p>
</li>
<li><p><mark>@After(“”)</mark>:最终通知方法</p>
</li>
<li><p><mark>@Pointcut(“execution(返回值类型  方法名(形参  形参要写到包下,例如java.lang.String))”)</mark>:切入点表达式:定义连接点的集合,要定义一个方法来承载,如果写的是<mark>@Pointcut(“@Annotation(自定义注解包名)”)</mark>,那么带有该自定义注解的方法都是连接点方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//要使用该切面,必须要@ComponentScan中能扫描到的注解的类,例如在类的上方加@Service</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aspect1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切点表达式,只用作承载,不用写逻辑,第一个*表示任意返回值,方法要到包名下,service.*表示service下的所有类,.*()表示所有方法,(..)中的..表示任意形参</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.lzy.service.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">servicePointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知方法,可以得到连接点的信息(方法,实参),注解()中写的是被切点注解的方法,意味着加入了该切点</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"servicePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        Object[] args = joinPoint.getArgs();<span class="comment">//得到传入的实参</span></span><br><span class="line">        Object target = joinPoint.getTarget();<span class="comment">//得到目标方法</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();<span class="comment">//得到方法名</span></span><br><span class="line">        <span class="comment">//以上都属于连接点信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returning表示连接点的返回值,其=的形参要与注解中的第二个形参名相同</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(pointcut = <span class="string">"servicePointCut()"</span>, returning = <span class="string">"bbb"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturnAdvice</span><span class="params">(JoinPoint joinPoint, Object bbb)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterReturning"</span>);</span><br><span class="line">        System.out.println(<span class="string">"bbb:"</span> + bbb);<span class="comment">//打印的是返回值,即return的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知方法,可以得到连接点的信息(方法,实参),还可以得到异常信息,catch里实现</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"servicePointCut()"</span>, throwing = <span class="string">"aaa"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowAdvice</span><span class="params">(JoinPoint joinPoint, Exception aaa)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterThrowing"</span>);</span><br><span class="line">        System.out.println(aaa.getMessage());<span class="comment">//打印的是这个异常的类型,例如ArithmeticException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知方法,finally里实现,这里只能得到连接点信息</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"servicePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAdvice</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果业务中同时需要四个通知,则可以使用环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"servicePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class="line">        Object proceed = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//前置@Before</span></span><br><span class="line">            Object[] args = proceedingJoinPoint.getArgs();<span class="comment">//得到传入的实参</span></span><br><span class="line">            Object target = proceedingJoinPoint.getTarget();<span class="comment">//得到目标方法</span></span><br><span class="line">            String name = proceedingJoinPoint.getSignature().getName();<span class="comment">//得到方法的名字</span></span><br><span class="line">            System.out.println(<span class="string">"前置通知,joinpoint_info:"</span>+Arrays.toString(args)+target+name);</span><br><span class="line">            proceed = proceedingJoinPoint.proceed();<span class="comment">//相当于method.invoke()</span></span><br><span class="line">            <span class="comment">//返回@AfterReturning</span></span><br><span class="line">            System.out.println(<span class="string">"返回通知"</span>+proceed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">//异常@AfterThrowing</span></span><br><span class="line">            System.out.println(<span class="string">"异常通知"</span>+e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//最终@After</span></span><br><span class="line">            System.out.println(<span class="string">"最终通知"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">        IPay iPay = <span class="keyword">new</span> AliPayImpl();<span class="comment">//多态,new的是实现类</span></span><br><span class="line">        IPay proxy = getProxy(iPay);<span class="comment">//这里得到的代理,代理的是接口的实现类</span></span><br><span class="line">        String pay = proxy.pay(<span class="number">5616.156</span>, <span class="string">"aaa"</span>, <span class="string">"bbb"</span>);<span class="comment">//用代理的方法,得到结果集</span></span><br><span class="line">        System.out.println(pay);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IPay <span class="title">getProxy</span><span class="params">(IPay iP)</span> </span>&#123;</span><br><span class="line">        IPay pay = (IPay) Proxy.newProxyInstance(iP.getClass().getClassLoader(), <span class="keyword">new</span> Class[]&#123;IPay<span class="class">.<span class="keyword">class</span>&#125;, <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">                Object result = <span class="keyword">null</span>;</span><br><span class="line">                TimeAspect.begin();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = method.invoke(iP, args);<span class="comment">//method是上面的代理使用的方法,即pay方法,传入的iP是IPay接口的AliPayImpl实现类,args是传入的实参,这里是动态获取代理</span></span><br><span class="line">                    System.out.println(<span class="string">"success"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"failed"</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    TimeAspect.end();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> pay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.基于XML配置的注解</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里写切入的方法,把方法放入bean中,相当于@Component--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAspect"</span> <span class="attr">class</span>=<span class="string">"com.lzy.aopTest.LogAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--这里引入aspect方法,用ref引入切入bean的id,相当于@Aspect--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logAspect"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里写切点的aop配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"自定义切点id"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.lzy.service.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里写切入方法的方法名等信息,相当于@Before等注解--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"logger"</span> <span class="attr">pointcut-ref</span>=<span class="string">"自定义切点id"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"自定义切点id所对应类的自定义方法名"</span> <span class="attr">pointcut-ref</span>=<span class="string">"自定义切点id"</span> <span class="attr">returning</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">""</span> <span class="attr">pointcut-ref</span>=<span class="string">"自定义切点id"</span> <span class="attr">throwing</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">""</span> <span class="attr">pointcut-ref</span>=<span class="string">"自定义切点id"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5-反射的概念"><a href="#5-反射的概念" class="headerlink" title="5.反射的概念"></a>5.反射的概念</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射,在代码运行过程中,来获得类结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.通过类名拿到类的类对象</span></span><br><span class="line">            Class clz = Class.forName(<span class="string">"com.lzy.aop.AliPayImpl"</span>);</span><br><span class="line">            <span class="comment">//可以拿到类的名字</span></span><br><span class="line">            String name = clz.getName();</span><br><span class="line">            <span class="comment">//通过类对象拿到注解(所有注解名)</span></span><br><span class="line">            Annotation annotation = clz.getAnnotation(Repository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Repository r = (Repository) annotation;</span><br><span class="line">                <span class="comment">//得到指定注解名</span></span><br><span class="line">                String repositoryName = r.value();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//得到类中的声明方法,是一个数组</span></span><br><span class="line">            Method[] declaredMethods = clz.getDeclaredMethods();</span><br><span class="line">            <span class="comment">//要取得一个具体的方法,可以通过遍历完成</span></span><br><span class="line">            String methodName = <span class="string">"pay"</span>;</span><br><span class="line">            Method payMethod = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Method method : declaredMethods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (methodName.equals(method.getName())) &#123;</span><br><span class="line">                    payMethod = method;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (payMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//执行拿到的方法,由于反射到的方法没有引用,所以要通过invoke来使用该方法</span></span><br><span class="line">                <span class="comment">//method.invoke(方法所在对象的引用,方法应该传入的实参)</span></span><br><span class="line">                Object o = clz.newInstance();<span class="comment">//通过newInstance()来拿到对象的引用</span></span><br><span class="line">                Object invoke = payMethod.invoke(o, <span class="number">111</span>, <span class="string">"张三"</span>, <span class="string">"李四"</span>);<span class="comment">//返回方法的结果</span></span><br><span class="line">                System.out.println(invoke);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>SSM框架</category>
      </categories>
      <tags>
        <tag>知识分享</tag>
      </tags>
  </entry>
</search>
